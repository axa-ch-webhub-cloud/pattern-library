@import "../functions/opposite-direction";

$triangle-direction: bottom !default;
$triangle-size: 10px !default;
$triangle-color: cureentColor !default;

/// Triangle helper mixin
/// @link https://css-tricks.com/snippets/sass/css-triangle-mixin/
/// @param {Direction} $direction [bottom] - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentColor] - Triangle color
/// @param {Length} $width [10px] - Triangle width
/// @param {Length} $height [10px|$width] - Triangle height
@mixin triangle(
  $direction: $triangle-direction,
  $color: $triangle-color,
  $width: $triangle-size,
  $height: $width
) {
  $perpendicular-borders: ($width / 2) solid transparent;

  @include triangle-color($direction, $color);

  width: 0;
  height: 0;
  // stylelint-disable-next-line scale-unlimited/declaration-strict-value
  font-size: 0;
  line-height: 0;
  content: "";

  border-style: solid;
  border-#{opposite-direction($direction)}-width: $height;
  border-#{$direction}: none;

  @if $direction == top or $direction == bottom {
    border-left: $perpendicular-borders;
    border-right: $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top: $perpendicular-borders;
  }

  // de-pixelate
  transform: scale(1.01);
}

/// Triangle color helper mixin
/// @param {Direction} $direction [bottom] - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentColor] - Triangle color
@mixin triangle-color(
  $direction: $triangle-direction,
  $color: $triangle-color
) {
  border-#{opposite-direction($direction)}-color: $color;
}
